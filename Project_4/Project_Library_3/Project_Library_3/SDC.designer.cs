#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project_Library_3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class SPDC : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCentralOffice(CentralOffice instance);
    partial void UpdateCentralOffice(CentralOffice instance);
    partial void DeleteCentralOffice(CentralOffice instance);
    partial void InsertTourtistCountry(TourtistCountry instance);
    partial void UpdateTourtistCountry(TourtistCountry instance);
    partial void DeleteTourtistCountry(TourtistCountry instance);
    partial void InsertGroup_s(Group_s instance);
    partial void UpdateGroup_s(Group_s instance);
    partial void DeleteGroup_s(Group_s instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    #endregion
		
		public SPDC(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SPDC(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SPDC(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SPDC(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CentralOffice> CentralOffice
		{
			get
			{
				return this.GetTable<CentralOffice>();
			}
		}
		
		public System.Data.Linq.Table<TourtistCountry> TourtistCountry
		{
			get
			{
				return this.GetTable<TourtistCountry>();
			}
		}
		
		public System.Data.Linq.Table<Group_s> Group_s
		{
			get
			{
				return this.GetTable<Group_s>();
			}
		}
		
		public System.Data.Linq.Table<Country> Country
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class CentralOffice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name_c;
		
		private EntitySet<TourtistCountry> _TourtistCountry;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onname_cChanging(string value);
    partial void Onname_cChanged();
    #endregion
		
		public CentralOffice()
		{
			this._TourtistCountry = new EntitySet<TourtistCountry>(new Action<TourtistCountry>(this.attach_TourtistCountry), new Action<TourtistCountry>(this.detach_TourtistCountry));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_c", CanBeNull=false)]
		public string name_c
		{
			get
			{
				return this._name_c;
			}
			set
			{
				if ((this._name_c != value))
				{
					this.Onname_cChanging(value);
					this.SendPropertyChanging();
					this._name_c = value;
					this.SendPropertyChanged("name_c");
					this.Onname_cChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CentralOffice_TourtistCountry", Storage="_TourtistCountry", ThisKey="id", OtherKey="id_centraloffice")]
		public EntitySet<TourtistCountry> TourtistCountry
		{
			get
			{
				return this._TourtistCountry;
			}
			set
			{
				this._TourtistCountry.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TourtistCountry(TourtistCountry entity)
		{
			this.SendPropertyChanging();
			entity.CentralOffice = this;
		}
		
		private void detach_TourtistCountry(TourtistCountry entity)
		{
			this.SendPropertyChanging();
			entity.CentralOffice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class TourtistCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name_c;
		
		private int _id_centraloffice;
		
		private EntitySet<Group_s> _Group_s1;
		
		private EntityRef<CentralOffice> _CentralOffice;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onname_cChanging(string value);
    partial void Onname_cChanged();
    partial void Onid_centralofficeChanging(int value);
    partial void Onid_centralofficeChanged();
    #endregion
		
		public TourtistCountry()
		{
			this._Group_s1 = new EntitySet<Group_s>(new Action<Group_s>(this.attach_Group_s1), new Action<Group_s>(this.detach_Group_s1));
			this._CentralOffice = default(EntityRef<CentralOffice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_c", CanBeNull=false)]
		public string name_c
		{
			get
			{
				return this._name_c;
			}
			set
			{
				if ((this._name_c != value))
				{
					this.Onname_cChanging(value);
					this.SendPropertyChanging();
					this._name_c = value;
					this.SendPropertyChanged("name_c");
					this.Onname_cChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_centraloffice")]
		public int id_centraloffice
		{
			get
			{
				return this._id_centraloffice;
			}
			set
			{
				if ((this._id_centraloffice != value))
				{
					if (this._CentralOffice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_centralofficeChanging(value);
					this.SendPropertyChanging();
					this._id_centraloffice = value;
					this.SendPropertyChanged("id_centraloffice");
					this.Onid_centralofficeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TourtistCountry_Group_s1", Storage="_Group_s1", ThisKey="id", OtherKey="id_touristcountry")]
		public EntitySet<Group_s> Group_s1
		{
			get
			{
				return this._Group_s1;
			}
			set
			{
				this._Group_s1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CentralOffice_TourtistCountry", Storage="_CentralOffice", ThisKey="id_centraloffice", OtherKey="id", IsForeignKey=true)]
		public CentralOffice CentralOffice
		{
			get
			{
				return this._CentralOffice.Entity;
			}
			set
			{
				CentralOffice previousValue = this._CentralOffice.Entity;
				if (((previousValue != value) 
							|| (this._CentralOffice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CentralOffice.Entity = null;
						previousValue.TourtistCountry.Remove(this);
					}
					this._CentralOffice.Entity = value;
					if ((value != null))
					{
						value.TourtistCountry.Add(this);
						this._id_centraloffice = value.id;
					}
					else
					{
						this._id_centraloffice = default(int);
					}
					this.SendPropertyChanged("CentralOffice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Group_s1(Group_s entity)
		{
			this.SendPropertyChanging();
			entity.TourtistCountry1 = this;
		}
		
		private void detach_Group_s1(Group_s entity)
		{
			this.SendPropertyChanging();
			entity.TourtistCountry1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Group_s : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name_c;
		
		private int _id_touristcountry;
		
		private EntityRef<TourtistCountry> _TourtistCountry1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onname_cChanging(string value);
    partial void Onname_cChanged();
    partial void Onid_touristcountryChanging(int value);
    partial void Onid_touristcountryChanged();
    #endregion
		
		public Group_s()
		{
			this._TourtistCountry1 = default(EntityRef<TourtistCountry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_c", CanBeNull=false)]
		public string name_c
		{
			get
			{
				return this._name_c;
			}
			set
			{
				if ((this._name_c != value))
				{
					this.Onname_cChanging(value);
					this.SendPropertyChanging();
					this._name_c = value;
					this.SendPropertyChanged("name_c");
					this.Onname_cChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_touristcountry")]
		public int id_touristcountry
		{
			get
			{
				return this._id_touristcountry;
			}
			set
			{
				if ((this._id_touristcountry != value))
				{
					if (this._TourtistCountry1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_touristcountryChanging(value);
					this.SendPropertyChanging();
					this._id_touristcountry = value;
					this.SendPropertyChanged("id_touristcountry");
					this.Onid_touristcountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TourtistCountry_Group_s1", Storage="_TourtistCountry1", ThisKey="id_touristcountry", OtherKey="id", IsForeignKey=true)]
		public TourtistCountry TourtistCountry1
		{
			get
			{
				return this._TourtistCountry1.Entity;
			}
			set
			{
				TourtistCountry previousValue = this._TourtistCountry1.Entity;
				if (((previousValue != value) 
							|| (this._TourtistCountry1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TourtistCountry1.Entity = null;
						previousValue.Group_s1.Remove(this);
					}
					this._TourtistCountry1.Entity = value;
					if ((value != null))
					{
						value.Group_s1.Add(this);
						this._id_touristcountry = value.id;
					}
					else
					{
						this._id_touristcountry = default(int);
					}
					this.SendPropertyChanged("TourtistCountry1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name_country;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onname_cChanging(string value);
    partial void Onname_cChanged();
    #endregion
		
		public Country()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_country", CanBeNull=false)]
		public string name_c
		{
			get
			{
				return this._name_country;
			}
			set
			{
				if ((this._name_country != value))
				{
					this.Onname_cChanging(value);
					this.SendPropertyChanging();
					this._name_country = value;
					this.SendPropertyChanged("name_c");
					this.Onname_cChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
